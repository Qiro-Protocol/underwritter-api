generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  BORROWER
  UNDERWRITER
  LENDER
  USER
}

enum RecordType {
  CREDIT
}

model User {
  id                 Int                 @id @default(autoincrement())
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @default(now())
  email              String              @unique
  firstName          String
  lastName           String
  password           String
  profileId          Int?
  onboarded          Boolean             @default(false)
  haveCompany        Boolean             @default(false)
  company            Company[]
  role               UserRole            @default(USER)
  underWirterProfile UnderwriterProfile?
}

model Company {
  id          Int        @id @default(autoincrement())
  name        String
  headLine    String?
  description String?
  logo        String?
  website     String?
  location    String
  foundedYear String
  teamSize    String
  owner       User       @relation(fields: [ownerId], references: [id])
  ownerId     Int
  credit      Record[]
  documents   Document[]
}

model Record {
  id        Int        @id @default(autoincrement())
  label     String
  value     String
  type      RecordType @default(CREDIT)
  Company   Company?   @relation(fields: [companyId], references: [id])
  companyId Int?
}

enum DOCUMENT_TYPES {
  SUBSIDIARY_DOCS
  LICENSES
  AGREEMENTS
  INVESTOR_DECK
}

model Document {
  id           Int            @id @default(autoincrement())
  label        String
  link         String
  documentType DOCUMENT_TYPES

  Company   Company? @relation(fields: [companyId], references: [id])
  companyId Int?
}

enum ApplicationStatus {
  IN_REVIEW
  PENDING
  APPROVeD
}

model Application {
  id          Int               @id @default(autoincrement())
  slug        String
  details     String?
  loanAmmount Int?
  status      ApplicationStatus @default(PENDING)
  Policy      Policy?           @relation(fields: [policyId], references: [id])
  policyId    Int?
}

model Policy {
  id           Int           @id @default(autoincrement())
  name         String
  polciyCode   Json
  applications Application[]
}

model UnderwriterProfile {
  id                 Int  @id @default(autoincrement())
  earnings           Int
  acceptanceRate     Int
  default_ate        Int
  total_applications Int
  user               User @relation(fields: [userId], references: [id])
  userId             Int  @unique
}
